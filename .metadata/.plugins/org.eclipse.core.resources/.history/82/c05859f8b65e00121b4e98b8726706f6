package sequences;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<T> extends AbstractSequence<T> {

    private int count = 0;
    private Node front = null;
    private Node rear = null;
    private Node curr = null;
    
    @Override
    public Iterator<T> iterator() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public boolean isEmpty() {
        // TODO Auto-generated method stub
        if(this.count == 0) return true;
        return false;
    }

    @Override
    public void clear() {
        // TODO Auto-generated method stub
        this.count = 0;
        this.front = null;
        this.rear = null;
        this.curr = null;
    }

    @Override
    public int size() {
        // TODO Auto-generated method stub
        return this.count;
    }

    @Override
    public void add(T value) {
        // TODO Auto-generated method stub
        Node newNode = new Node();
        newNode.data = value;
        if(this.count == 0) {
            this.rear = newNode;
            this.front = newNode;
            this.curr = newNode;
        }else {
            this.rear.next = newNode;
            newNode.previous = this.rear;
            this.rear = newNode;
        }
        this.count++;
    }

    @Override
    public T remove() throws NoSuchElementException {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public T peek() throws NoSuchElementException {
        // TODO Auto-generated method stub
        return null;
    }

    void addFront(T value) {
        Node newNode = new Node();
        newNode.data = value;
        if(this.count == 0) {
            this.front = newNode;
            this.rear = newNode;
            this.curr = newNode;
        }else {
            newNode.next = this.front;
            this.front.previous = newNode;
            this.front = newNode;
        }
    }
    
    T peekRear() {
        return null;
    }
    
    T removeRear() {
        return null;
    }
    
    Iterator<T> reverseIterator(){
        return null;
    }
    
    private class Node {
        public T data;
        public Node previous;
        public Node next;
    }
}
