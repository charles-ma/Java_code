package sequences;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class Stack<T> extends AbstractSequence<T> {

    private Node first = null;
    private int count = 0;

    @Override
    public Iterator<T> iterator() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public boolean isEmpty() {
        // TODO Auto-generated method stub
        if(this.count == 0) return true;
	return false;
    }

    @Override
    public void clear() {
        // TODO Auto-generated method stub
	this.first = null;
	this.count = 0;
    }

    @Override
    public int size() {
        // TODO Auto-generated method stub
        return this.count;
    }

    @Override
    public void add(T value) {
        // TODO Auto-generated method stub
	if(value == null) ;
	else {
	    Node newNode = new Node();
	    newNode.data = value;
	    newNode.next = this.first;
	    this.first = newNode;
	    this.count++;
	}
    }

    @Override
    public T remove() throws NoSuchElementException {
        // TODO Auto-generated method stub
        if(this.count == 0) throw new NoSuchElementException();
	Node result = this.first;
	this.first = this.first.next;
	this.count--;
	return result.data;
    }

    @Override
    public T peek() throws NoSuchElementException {
        // TODO Auto-generated method stub
        if(this.count == 0) throw new NoSuchElementException();
        return this.first.data;
    }

    private class Node {
	public T data = null;
	public Node next = null;
    }

}
